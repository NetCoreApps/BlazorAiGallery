@using Ljbc1994.Blazor.IntersectionObserver.Components
@inherits UiComponentBase

@if (Artifact != null)
{
    if (LazyLoad)
    {
        <IntersectionObserve>
            @{
                if (context.IsIntersecting) 
                {
                    UserState.HasIntersected.Add(Artifact.Id);
                }
            }
            <img @ref="context.Ref.Current" class=@Class alt=@Artifact.FileName width=@width height=@height
                src=@(useSrc ?? (!context.IsIntersecting && !UserState.HasIntersected.Contains(Artifact.Id) ? BlackBlacground : Artifact.GetPublicUrl()))
                @onerror=@(() => useSrc = Artifact.GetFallbackUrl())>
        </IntersectionObserve>
    }
    else
    {
        <img class=@Class alt=@Artifact.FileName width=@width height=@height
             src=@(useSrc ?? Artifact.GetPublicUrl())
             @onerror=@(() => useSrc = Artifact.GetFallbackUrl())>
    }
}

@code {
    [Inject] public UserState UserState { get; set; } = default!;
    [Parameter, EditorRequired] public Artifact? Artifact { get; set; } = default!;
    [Parameter] public int? MinSize { get; set; }
    [Parameter] public bool LazyLoad { get; set; }

    const string BlackBlacground = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'%3E%3Cpath fill='%23000' d='M2 2h60v60H2z'/%3E%3C/svg%3E";

    int width => MinSize == null ? Artifact!.Width
        : (int)(Artifact!.Width > Artifact.Height
            ? (Artifact.Width / (double)Artifact.Height) * MinSize.Value
            : MinSize.Value);

    int height => MinSize == null ? Artifact!.Height
        : (int)(Artifact!.Height > Artifact.Width
            ? (Artifact.Height / (double)Artifact.Width) * MinSize.Value
            : MinSize.Value);

    string? useSrc;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        useSrc = null;
    }
}
