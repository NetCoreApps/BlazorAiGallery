@inherits TextInputBase

<div>
  @if (!string.IsNullOrEmpty(Label))
  {
      <label for=@Id class="block text-sm font-medium text-gray-700 dark:text-gray-300">@Label</label>
  }
  <div class="relative mt-1">
    <input id=@Id type="text" @bind="value" class="w-full rounded-md border border-gray-300 dark:border-gray-300 bg-white dark:bg-black py-2 pl-3 pr-12 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 sm:text-sm"
           role="combobox" aria-controls="options" aria-expanded="false" placeholder=@placeholder @bind:event="oninput" @onkeydown="OnKeyDown" @onkeyup="OnKeyUp" @onclick="update">
    <button type="button" @onclick="toggle" class="absolute inset-y-0 right-0 flex items-center rounded-r-md px-2 focus:outline-none">
      <!-- Heroicon name: mini/chevron-up-down -->
      <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z" clip-rule="evenodd" />
      </svg>
    </button>
    @if (showPopup)
    {
        <ul class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-black py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm" id="options" role="listbox">
          @foreach (var option in FilteredOptions)
          {
             <li @key="option.Key" class=@ClassNames(option.Key == active?.Key ? "bg-indigo-600 text-white" : "text-gray-900 dark:text-gray-100", "relative cursor-default select-none py-2 pl-3 pr-9")
                @onmouseover="_ => active = option" @onclick="_ => select(option)" role="option" tabindex="-1">
                <span class="block truncate">@option.Value</span>
             </li>
          }
        </ul>
    }
  </div>
</div>


@code {
    [Parameter] public int MaxItems { get; set; } = 200;

    [Parameter] public KeyValuePair<string,string>[] Options { get; set; }
    [Parameter] public EventCallback<KeyValuePair<string,string>> Selected { get; set; }

    string value;
    bool showPopup = false;
    KeyValuePair<string, string>? active;

    List<KeyValuePair<string,string>> FilteredOptions = new();

    List<KeyValuePair<string,string>> filterOptions() => Options == null 
        ? new List<KeyValuePair<string,string>>()
        : exclude(string.IsNullOrEmpty(value)
            ? Options
            : Options.Where(x => x.Value.ToLower().Contains(value.ToLower()))).Take(MaxItems).ToList();

    IEnumerable<KeyValuePair<string, string>> exclude(IEnumerable<KeyValuePair<string, string>> results) =>
        Exclude != null ? results.Where(x => !Exclude(x)) : results;

    [Parameter] public Predicate<KeyValuePair<string,string>>? Exclude { get; set; }

    string[] NavKeys = new[] { "Escape", "ArrowDown", "ArrowUp", "Enter", "PageUp", "PageDown" };

    async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (NavKeys.Contains(e.Code))
            return;
        
        update();
    }

    async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (!showPopup)
        {
            if (e.Code == "ArrowDown")
            {
                showPopup = true;
                active = FilteredOptions.FirstOrDefault();
            }

            return;
        }

        if (e.Code == "Escape")
        {
            showPopup = false;
        }
        else if (e.Code == "ArrowDown")
        {
            if (active == null)
            {
                active = FilteredOptions.FirstOrDefault();
            }
            else
            {
                var currIndex = FilteredOptions.FindIndex(x => x.Key == active.Value.Key);
                active = currIndex + 1 < FilteredOptions.Count
                    ? FilteredOptions[currIndex + 1]
                    : FilteredOptions.FirstOrDefault();
            }
        }
        else if (e.Code == "ArrowUp")
        {
            if (active == null)
            {
                active = FilteredOptions.LastOrDefault();
            }
            else
            {
                var currIndex = FilteredOptions.FindIndex(x => x.Key == active.Value.Key);
                active = currIndex - 1 > 0
                    ? FilteredOptions[currIndex - 1]
                    : FilteredOptions.LastOrDefault();
            }
        }
        else if (e.Code == "Enter")
        {
            if (active != null)
            {
                await select(active.Value);
            }
            else
            {
                showPopup = false;
            }
        }
    }

    void FilterResults(KeyboardEventArgs e) => update();

    void toggle() 
    {
        if (showPopup)
        {
            showPopup = false;
            return;
        }
        update();
    }

    void update() 
    {
        showPopup = true;
        refresh();
        StateHasChanged();
    }

    async Task select(KeyValuePair<string,string> option)
    {
        showPopup = false;
        active = null;
        await Selected.InvokeAsync(option);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        refresh();
    }

    void refresh() {
        FilteredOptions = filterOptions();
    }

}

